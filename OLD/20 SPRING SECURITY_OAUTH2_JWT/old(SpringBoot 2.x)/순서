01 build.gradle
    	//JWT TOKEN
    	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
    	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'

02 SecurityConfig
    			.and()
    			//OAUTH2
    				.oauth2Login()
    				.userInfoEndpoint()
    				.userService(principalDetailsOAuth2Service);



03 jwt 폴더 추가



04  LoginSuccessHandler

    CustomLoginSuccessHandler
		PrincipalDetails principalDetails = (PrincipalDetails) authentication.getPrincipal();
//      String token = JwtUtils.createToken(principalDetails);

		TokenInfo tokenInfo = jwtTokenProvider.generateToken(authentication);
		// 쿠키 생성
		Cookie cookie = new Cookie(JwtProperties.COOKIE_NAME, tokenInfo.getAccessToken());
		cookie.setMaxAge(JwtProperties.EXPIRATION_TIME); // 쿠키의 만료시간 설정
		cookie.setPath("/");
		response.addCookie(cookie);

		System.out.println("[JWT LOGIN SUCCESS HANDLER]...TokenInfo!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! : " + tokenInfo);


05 LogoutSuccessHandler
    OAuthLogoutHandler
        코드 확인


06 SecurityConfig
    		.deleteCookies("JSESSIONID","JWT-AUTHENTICATION")

			http.addFilterBefore
                        (
                                new JwtAuthorizationFilter(userRepository,jwtTokenProvider),
                                BasicAuthenticationFilter.class
                        );


06  일반 유저 로그인 후 확인

07 OAuth 로그인 계정 확인
    SecurityConfig
    			.and()
    			//OAUTH2
    				.oauth2Login()
    				.successHandler(new OAuthSuccessHandler())      //추가
    				.userInfoEndpoint()
    				.userService(principalDetailsOAuth2Service);

08 OauthSuccessHandler 추가


09



